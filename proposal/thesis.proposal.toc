\contentsline {chapter}{Abstract}{i}{chapter*.1}%
\contentsline {chapter}{Acknowledgments}{ii}{chapter*.2}%
\contentsline {chapter}{Nomenclature}{vii}{chapter*.4}%
\contentsline {chapter}{\numberline {1}Introduction}{1}{chapter.1}%
\contentsline {section}{\numberline {1.1}Problem Statement}{2}{section.1.1}%
\contentsline {section}{\numberline {1.2}Addressing the Problem}{2}{section.1.2}%
\contentsline {section}{\numberline {1.3}Research Questions}{3}{section.1.3}%
\contentsline {section}{\numberline {1.4}Motivation}{4}{section.1.4}%
\contentsline {subsection}{\numberline {1.4.1}Why Design a New VMI?}{4}{subsection.1.4.1}%
\contentsline {subsection}{\numberline {1.4.2}Why Design a Hypervisor-Based Virtual Machine Introspection?}{5}{subsection.1.4.2}%
\contentsline {subsection}{\numberline {1.4.3}Why eBPF?}{8}{subsection.1.4.3}%
\contentsline {subsection}{\numberline {1.4.4}Why Utilize System Calls for Introspection?}{11}{subsection.1.4.4}%
\contentsline {subsection}{\numberline {1.4.5}Why Utilize Sequences of System Calls?}{12}{subsection.1.4.5}%
\contentsline {section}{\numberline {1.5}Related Work}{12}{section.1.5}%
\contentsline {subsection}{\numberline {1.5.1}Properties of Nitro}{13}{subsection.1.5.1}%
\contentsline {subsubsection}{\numberline {1.5.1.1}Guest OS Portability}{13}{subsubsection.1.5.1.1}%
\contentsline {subsubsection}{\numberline {1.5.1.2}Evastion Resistant}{13}{subsubsection.1.5.1.2}%
\contentsline {subsection}{\numberline {1.5.2}Implementation}{13}{subsection.1.5.2}%
\contentsline {subsubsection}{\numberline {1.5.2.1}Nitro Client Side Implementation}{14}{subsubsection.1.5.2.1}%
\contentsline {subsubsection}{\numberline {1.5.2.2}VMI Mechanisms for Tracing System Calls From The Host}{14}{subsubsection.1.5.2.2}%
\contentsline {subsubsection}{\numberline {1.5.2.3}How Nitro Empowers Anomaly Detection}{14}{subsubsection.1.5.2.3}%
\contentsline {section}{\numberline {1.6}Contributions}{15}{section.1.6}%
\contentsline {section}{\numberline {1.7}Thesis Organization}{15}{section.1.7}%
\contentsline {chapter}{\numberline {2}Background}{17}{chapter.2}%
\contentsline {section}{\numberline {2.1}Virtual Machine Introspection}{17}{section.2.1}%
\contentsline {section}{\numberline {2.2}Hypervisor}{17}{section.2.2}%
\contentsline {section}{\numberline {2.3}Intel Virtualization Extention (VT-X)}{18}{section.2.3}%
\contentsline {section}{\numberline {2.4}The Kernel Virtual Machine Hypervisor}{20}{section.2.4}%
\contentsline {subsection}{\numberline {2.4.1}Model Specific Registers}{20}{subsection.2.4.1}%
\contentsline {subsection}{\numberline {2.4.2}VMCS}{20}{subsection.2.4.2}%
\contentsline {subsection}{\numberline {2.4.3}VM ENTRY Context Switch}{20}{subsection.2.4.3}%
\contentsline {subsection}{\numberline {2.4.4}VM EXIT Context Switch}{20}{subsection.2.4.4}%
\contentsline {section}{\numberline {2.5}QEMU}{20}{section.2.5}%
\contentsline {section}{\numberline {2.6}System Calls}{20}{section.2.6}%
\contentsline {section}{\numberline {2.7}Virtual Machine Introspection}{20}{section.2.7}%
\contentsline {section}{\numberline {2.8}eBPF}{21}{section.2.8}%
\contentsline {section}{\numberline {2.9}The Linux Kernel Tracepoint API}{21}{section.2.9}%
\contentsline {section}{\numberline {2.10}pH-based Sequences of System Call}{21}{section.2.10}%
\contentsline {section}{\numberline {2.11}Nitro: Hardware-Based System Call Tracing for Virtual Machines}{21}{section.2.11}%
\contentsline {chapter}{\numberline {3}Designing Frail}{22}{chapter.3}%
\contentsline {section}{\numberline {3.1}The Problem with Hypervisor based VMI's}{23}{section.3.1}%
\contentsline {subsection}{\numberline {3.1.1}The Semantic Gap Problem}{23}{subsection.3.1.1}%
\contentsline {subsection}{\numberline {3.1.2}Inability to Trace KVM Guest System Calls from the KVM Hypervisor}{23}{subsection.3.1.2}%
\contentsline {section}{\numberline {3.2}Approaching the Problem}{24}{section.3.2}%
\contentsline {subsection}{\numberline {3.2.1}Approaching The Semantic Gap Problem}{24}{subsection.3.2.1}%
\contentsline {subsection}{\numberline {3.2.2}Approaching the KVM Hypervisors inability to Trace Guest System Calls}{24}{subsection.3.2.2}%
\contentsline {chapter}{\numberline {4}Implementing Frail}{25}{chapter.4}%
\contentsline {section}{\numberline {4.1}User Space Component}{25}{section.4.1}%
\contentsline {section}{\numberline {4.2}Kernel Space Component}{25}{section.4.2}%
\contentsline {subsection}{\numberline {4.2.1}Custom Linux Kernel Tracepoint}{25}{subsection.4.2.1}%
\contentsline {subsection}{\numberline {4.2.2}Kernel Module}{25}{subsection.4.2.2}%
\contentsline {section}{\numberline {4.3}Tracing Processess}{25}{section.4.3}%
\contentsline {section}{\numberline {4.4}Proof of Tracability of all KVM Guest System Calls}{25}{section.4.4}%
\contentsline {chapter}{\numberline {5}Threat Model of Frail}{26}{chapter.5}%
\contentsline {chapter}{\numberline {6}Future Work}{27}{chapter.6}%
\contentsline {chapter}{\numberline {7}Conclusion}{28}{chapter.7}%
\contentsline {chapter}{\numberline {8}References}{29}{chapter.8}%
