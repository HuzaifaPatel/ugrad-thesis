\contentsline {chapter}{Abstract}{i}{chapter*.1}%
\contentsline {chapter}{Acknowledgments}{ii}{chapter*.2}%
\contentsline {chapter}{List of Figures}{vii}{section*.4}%
\contentsline {chapter}{List of Tables}{viii}{section*.6}%
\contentsline {chapter}{Nomenclature}{ix}{chapter*.8}%
\contentsline {chapter}{\numberline {1}Introduction}{1}{chapter.1}%
\contentsline {section}{\numberline {1.1}The Problem}{2}{section.1.1}%
\contentsline {section}{\numberline {1.2}Addressing the Problem}{3}{section.1.2}%
\contentsline {section}{\numberline {1.3}Research Questions}{3}{section.1.3}%
\contentsline {section}{\numberline {1.4}Motivation}{4}{section.1.4}%
\contentsline {subsection}{\numberline {1.4.1}Why Design a New VMI?}{5}{subsection.1.4.1}%
\contentsline {subsection}{\numberline {1.4.2}Why Design a Hypervisor-Based VMI System?}{6}{subsection.1.4.2}%
\contentsline {subsubsection}{\numberline {1.4.2.1}Hypervisor-Based VMI's}{6}{subsubsection.1.4.2.1}%
\contentsline {paragraph}{\numberline {1.4.2.1.1}Isolation}{6}{paragraph.1.4.2.1.1}%
\contentsline {paragraph}{\numberline {1.4.2.1.2}Inspection}{7}{paragraph.1.4.2.1.2}%
\contentsline {paragraph}{\numberline {1.4.2.1.3}Inspection}{8}{paragraph.1.4.2.1.3}%
\contentsline {paragraph}{\numberline {1.4.2.1.4}Deployability}{8}{paragraph.1.4.2.1.4}%
\contentsline {subsubsection}{\numberline {1.4.2.2}Guest-Based VMI's}{8}{subsubsection.1.4.2.2}%
\contentsline {paragraph}{\numberline {1.4.2.2.1}Privilege Escalation}{8}{paragraph.1.4.2.2.1}%
\contentsline {paragraph}{\numberline {1.4.2.2.2}Tampering}{9}{paragraph.1.4.2.2.2}%
\contentsline {paragraph}{\numberline {1.4.2.2.3}Rich Abstractions}{10}{paragraph.1.4.2.2.3}%
\contentsline {paragraph}{\numberline {1.4.2.2.4}Speed}{10}{paragraph.1.4.2.2.4}%
\contentsline {subsubsection}{\numberline {1.4.2.3}Conclusion}{11}{subsubsection.1.4.2.3}%
\contentsline {subsection}{\numberline {1.4.3}Why eBPF?}{11}{subsection.1.4.3}%
\contentsline {subsection}{\numberline {1.4.4}Why Utilize System Calls for Introspection?}{13}{subsection.1.4.4}%
\contentsline {subsection}{\numberline {1.4.5}Why Utilize Sequences of System Calls?}{14}{subsection.1.4.5}%
\contentsline {section}{\numberline {1.5}Related Work}{15}{section.1.5}%
\contentsline {subsection}{\numberline {1.5.1}Properties of Nitro}{15}{subsection.1.5.1}%
\contentsline {subsubsection}{\numberline {1.5.1.1}Guest OS Portability}{15}{subsubsection.1.5.1.1}%
\contentsline {subsubsection}{\numberline {1.5.1.2}Evasion Resistant}{16}{subsubsection.1.5.1.2}%
\contentsline {subsection}{\numberline {1.5.2}Implementation}{16}{subsection.1.5.2}%
\contentsline {subsubsection}{\numberline {1.5.2.1}Nitro Client Side Implementation}{16}{subsubsection.1.5.2.1}%
\contentsline {subsubsection}{\numberline {1.5.2.2}VMI Mechanisms for Tracing System Calls From The Host}{16}{subsubsection.1.5.2.2}%
\contentsline {subsubsection}{\numberline {1.5.2.3}How Nitro Empowers Anomaly Detection}{17}{subsubsection.1.5.2.3}%
\contentsline {section}{\numberline {1.6}Contributions \& Improvements On Related Work}{17}{section.1.6}%
\contentsline {section}{\numberline {1.7}Thesis Organization}{18}{section.1.7}%
\contentsline {chapter}{\numberline {2}Background}{19}{chapter.2}%
\contentsline {section}{\numberline {2.1}Overview of Hypervisors}{19}{section.2.1}%
\contentsline {subsection}{\numberline {2.1.1}Type 1 Hypervisor}{19}{subsection.2.1.1}%
\contentsline {subsection}{\numberline {2.1.2}Type 2 Hypervisor}{20}{subsection.2.1.2}%
\contentsline {subsection}{\numberline {2.1.3}Problems With Type 1 \& Type 2 Hypervisor Classifications}{20}{subsection.2.1.3}%
\contentsline {subsection}{\numberline {2.1.4}Native Hypervisor}{21}{subsection.2.1.4}%
\contentsline {subsection}{\numberline {2.1.5}Emulation Hypervisor}{21}{subsection.2.1.5}%
\contentsline {section}{\numberline {2.2}Intel Central Processing Unit}{22}{section.2.2}%
\contentsline {subsection}{\numberline {2.2.1}Exceptions}{22}{subsection.2.2.1}%
\contentsline {subsection}{\numberline {2.2.2}Faults}{22}{subsection.2.2.2}%
\contentsline {subsection}{\numberline {2.2.3}Traps}{23}{subsection.2.2.3}%
\contentsline {subsection}{\numberline {2.2.4}Instructions}{24}{subsection.2.2.4}%
\contentsline {subsection}{\numberline {2.2.5}\%RIP Regster}{24}{subsection.2.2.5}%
\contentsline {subsection}{\numberline {2.2.6}Protection Rings}{24}{subsection.2.2.6}%
\contentsline {subsection}{\numberline {2.2.7}Execution Modes}{27}{subsection.2.2.7}%
\contentsline {subsection}{\numberline {2.2.8}Model Specific Register (MSR)}{27}{subsection.2.2.8}%
\contentsline {section}{\numberline {2.3}Intel Virtualization Extension (VT-X)}{30}{section.2.3}%
\contentsline {subsection}{\numberline {2.3.1}Overview}{30}{subsection.2.3.1}%
\contentsline {subsection}{\numberline {2.3.2}Novel Instruction Set}{32}{subsection.2.3.2}%
\contentsline {subsection}{\numberline {2.3.3}The Virtual Machine Control Structure (VMCS)}{34}{subsection.2.3.3}%
\contentsline {subsection}{\numberline {2.3.4}VM-Exit}{36}{subsection.2.3.4}%
\contentsline {subsection}{\numberline {2.3.5}VM-Entry}{44}{subsection.2.3.5}%
\contentsline {section}{\numberline {2.4}System Calls}{46}{section.2.4}%
\contentsline {section}{\numberline {2.5}The Kernel Virtual Machine (KVM) Hypervisor \& QEMU}{46}{section.2.5}%
\contentsline {section}{\numberline {2.6}Virtual Machine Introspection}{53}{section.2.6}%
\contentsline {section}{\numberline {2.7}Intrusion Detection}{54}{section.2.7}%
\contentsline {section}{\numberline {2.8}eBPF}{54}{section.2.8}%
\contentsline {section}{\numberline {2.9}The Linux Kernel Tracepoint API}{54}{section.2.9}%
\contentsline {section}{\numberline {2.10}pH-based Sequences of System Call}{54}{section.2.10}%
\contentsline {chapter}{\numberline {3}Designing Frail}{55}{chapter.3}%
\contentsline {section}{\numberline {3.1}Tracing KVM VM System Calls}{55}{section.3.1}%
\contentsline {section}{\numberline {3.2}The Problem with Hypervisor based VMI's}{57}{section.3.2}%
\contentsline {subsection}{\numberline {3.2.1}The Semantic Gap Problem}{57}{subsection.3.2.1}%
\contentsline {subsection}{\numberline {3.2.2}Inability to Trace KVM Guest System Calls from the KVM Hypervisor}{58}{subsection.3.2.2}%
\contentsline {section}{\numberline {3.3}Approaching the Problem}{58}{section.3.3}%
\contentsline {subsection}{\numberline {3.3.1}Approaching The Semantic Gap Problem}{58}{subsection.3.3.1}%
\contentsline {subsection}{\numberline {3.3.2}Approaching the KVM Hypervisors inability to Trace Guest System Calls}{58}{subsection.3.3.2}%
\contentsline {chapter}{\numberline {4}Implementing Frail}{60}{chapter.4}%
\contentsline {section}{\numberline {4.1}User Space Component}{60}{section.4.1}%
\contentsline {section}{\numberline {4.2}Kernel Space Component}{60}{section.4.2}%
\contentsline {subsection}{\numberline {4.2.1}Custom Linux Kernel Tracepoint}{60}{subsection.4.2.1}%
\contentsline {subsection}{\numberline {4.2.2}Kernel Module}{60}{subsection.4.2.2}%
\contentsline {section}{\numberline {4.3}Tracing Processess}{60}{section.4.3}%
\contentsline {section}{\numberline {4.4}Proof of Tracability of all KVM Guest System Calls}{60}{section.4.4}%
\contentsline {chapter}{\numberline {5}Threat Model of Frail}{61}{chapter.5}%
\contentsline {chapter}{\numberline {6}Future Work (Winter 2022)}{62}{chapter.6}%
\contentsline {section}{\numberline {6.1}Disadvantage to our Design}{62}{section.6.1}%
\contentsline {chapter}{\numberline {7}Conclusion}{63}{chapter.7}%
